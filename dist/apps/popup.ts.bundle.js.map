{"version":3,"file":"apps/popup.ts.bundle.js","mappings":";;;;;;;;;;;;;;AAAA;AAAA;AAgCA;AA/BA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;;;;;;;;;;;;;;;;AC9BA;;AAEA;AACA;AAAA;AAmBA;AAlBA;;;;;;;AAOA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;;;;;;;;;;;;;;;;ACxBA;AACA;AAAA;AAoDA;AAnDA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;;;;;;;;;;;;;;;;ACrDA;;AAEA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;;;;;;;;;;;;;;;;ACjBA;;AAEA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACfA;AAGA;AAKA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;;;;;;AACA;AACA;AACA;;AAAA;;;;;AACA;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;AAIA;AACA;;;;;;AACA;AACA;AACA;AACA;;AAAA;;;;;AACA;AAEA;;;;AAIA;AACA;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAnBA;AAoBA;;;;;AACA;AAEA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;AAIA;AACA;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAnBA;AAoBA;;;;;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;;;;;;;;;;;;;;;;;;AChIA;AACA;AAEA;AACA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AAAA;;;;;;;;;;;;;;;;AC9EA;AAKA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;;;;;;;;;;;;;;;;AChCA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;;;;;;;;;;;;;;;;ACnCA;;AAEA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;;;;;;;;;;;;;;;;;ACjBA;AAEA;;AAEA;AACA;AAIA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;;;;;;;;;;;;;;;;;ACrBA;AAKA;;;AAGA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AAAA;;AAEA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;;;;;;;;;;;;;;;;ACpGA;AAEA;;AAEA;AACA;AAGA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAmBA;AAAA;;;;;;;;;;;;;;;;AC5HA;;AAEA;AACA;AAKA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrCA;AAEA;;AAEA;AACA;AAAA;AAqBA;AAnBA;;;AACA;AACA;AACA;AACA;;;;AAEA;AAEA;;;;AACA;AACA;AACA;AACA;AACA;;;AACA;AAEA;;;AACA;;;;AACA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;AC3BA;AAEA;AACA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAIA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;;;;;;;;;;;;;;;;;;AClOA;AAGA;AAEA;AACA;AAQA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;;;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;AAIA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;;;;AAIA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AAEA;;;;AAIA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AAAA;;;;;;;;;;;;;;;;ACjKA;;;AAGA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;;;;;;;;;;;;;;;;ACpDA;;;AAGA;AACA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;AC7DA;AAEA;AACA;AACA;AAEA;;;AAGA;AACA;AAQA;AAHA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;;;;;;;;;;;;;;;;;;;ACtMA;AACA;AAIA;AAEA;AAKA;AAFA;AAGA;AACA;AACA;AAEA;;;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AACA;AAEA;;;;AAIA;AACA;AACA;AACA;AAEA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;;;;;;;;;;;;;;;;;;ACjHA;;;AAGA;AAEA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AAEA;;;;;AAKA;AACA;AACA;AACA;;;;;;;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACPA;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AASA;;;;;;;;;;;AAWA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;;;;;AACA;;AAAA;AACA;AACA;;AAAA;AACA;AACA;AADA;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;;;;;AAEA;AAEA;AAEA;;AAEA;AACA;;;;;AACA;;AAAA;AACA;;AAAA;AACA;;AAAA;AACA;AAEA;;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;;;;;AACA;AAEA;;;AAGA;AACA;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AANA;AACA;;;;;AAMA;AAEA;;AAEA;AACA;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AACA;AAEA;;AAEA;AACA;;;;;AACA;;AAAA;AAEA;;AAAA;AAEA;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAEA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://gitlab_time_spend/./src/domain/boostrap5.ts","webpack://gitlab_time_spend/./src/domain/common/template.ts","webpack://gitlab_time_spend/./src/domain/common/time.ts","webpack://gitlab_time_spend/./src/domain/element/elementClass.ts","webpack://gitlab_time_spend/./src/domain/element/elementId.ts","webpack://gitlab_time_spend/./src/domain/gitlab/gitLabApi.ts","webpack://gitlab_time_spend/./src/domain/gitlab/gitLabIssue.ts","webpack://gitlab_time_spend/./src/domain/gitlab/gitLabProjcetAccessTokens.ts","webpack://gitlab_time_spend/./src/domain/gitlab/gitLabUser.ts","webpack://gitlab_time_spend/./src/domain/html/spendButton.ts","webpack://gitlab_time_spend/./src/domain/html/totalElapsedTime.ts","webpack://gitlab_time_spend/./src/domain/issueDto.ts","webpack://gitlab_time_spend/./src/domain/issueList.ts","webpack://gitlab_time_spend/./src/domain/issueParam.ts","webpack://gitlab_time_spend/./src/domain/localStorageWindow.ts","webpack://gitlab_time_spend/./src/domain/stickyNote.ts","webpack://gitlab_time_spend/./src/domain/stickyNoteList.ts","webpack://gitlab_time_spend/./src/domain/workingTime.ts","webpack://gitlab_time_spend/./src/domain/workingTimeList.ts","webpack://gitlab_time_spend/./src/domain/workingTimeSticky.ts","webpack://gitlab_time_spend/./src/domain/workingTimeStickyList.ts","webpack://gitlab_time_spend/./src/function/nullCheck.ts","webpack://gitlab_time_spend/webpack/bootstrap","webpack://gitlab_time_spend/webpack/runtime/define property getters","webpack://gitlab_time_spend/webpack/runtime/hasOwnProperty shorthand","webpack://gitlab_time_spend/webpack/runtime/make namespace object","webpack://gitlab_time_spend/./src/apps/popup.ts"],"sourcesContent":["export class Bootstrap5{\r\n\tstatic CLASS_BG_PRIMARY(){\r\n\t\treturn 'bg-primary'\r\n\t}\r\n\t\r\n\tstatic CLASS_BG_SECOUNDARY(){\r\n\t\treturn 'bg-secondary'\r\n\t}\r\n\t\r\n\tstatic CLASS_BG_INFO(){\r\n\t\treturn 'bg-info'\r\n\t}\r\n\t\r\n\tstatic CLASS_BG_SUCCESS(){\r\n\t\treturn 'bg-success'\r\n\t}\r\n\t\r\n\tstatic CLASS_BG_WARNING(){\r\n\t\treturn 'bg-warning'\r\n\t}\r\n\t\r\n\tstatic CLASS_BG_DANGER(){\r\n\t\treturn 'bg-danger'\r\n\t}\r\n\t\r\n\tstatic CLASS_BG_LIGHT(){\r\n\t\treturn 'bg-light'\r\n\t}\r\n\t\r\n\tstatic CLASS_BG_DARK(){\r\n\t\treturn 'bg-dark'\r\n\t}\r\n}","import { ElementClass } from \"../element/elementClass\";\r\nimport { ElementId } from \"../element/elementId\";\r\n/**\r\n * htmlのTemplate要素を扱うためのクラス\r\n */\r\nexport class Template{\r\n    /**\r\n     * templateから指定した要素で包まれたdom要素を生成する\r\n     * \r\n     * @param {string} templateIdName \r\n     * @param {string} wrappedDomName \r\n     * @param {string} innerClassName \r\n     * @returns templateから生成したdom要素\r\n     */\r\n    static createWrappedDom(templateIdName: ElementId, wrappedDomName: string, innerClassName: ElementClass){\r\n        const template = document.getElementById(templateIdName.getString())!; //FIXME: Nullチェック\r\n        \r\n        const node = ((temp: HTMLElement) => {\r\n            let element = document.createElement(wrappedDomName);\r\n            element.innerHTML = temp.innerHTML;\r\n            return element;\r\n        });\r\n        return node(template).querySelector(innerClassName.getSelector())!;\r\n    } \r\n}","// 時間を任意のフォーマットに変換するクラス\r\nexport class Time{\r\n\t// 人間が読みやすい表記に変換する ex.1h20m, 3s\r\n\tstatic humanFomatFromMiliseconds(ms: number){\r\n\t\tconst totalSeconds = Time.milisecondsToSeconds(ms)\r\n\t\tconst hour = Math.floor( totalSeconds / (60*60) )\r\n\t\tconst minitue = Math.floor( (totalSeconds - hour*60*60) / 60 )\r\n\t\tconst seconds = totalSeconds - hour*60*60 - minitue*60\r\n\r\n\t\tlet timeForHuman = \"\"\r\n\t\tif(hour > 0){\r\n\t\t\ttimeForHuman = timeForHuman + hour + \"h\"\r\n\t\t}\r\n\t\tif(minitue > 0){\r\n\t\t\ttimeForHuman = timeForHuman + minitue + \"m\"\r\n\t\t}\r\n\t\tif(hour == 0 && minitue == 0){\r\n\t\t\ttimeForHuman = seconds + \"s\"\r\n\t\t}\r\n\t\treturn timeForHuman\r\n\t}\r\n\t// デジタルクロック表記（00:00）に変換する\r\n\tstatic secondsToclock(ms: number){\r\n\t\tconst totalSeconds = Time.milisecondsToSeconds(ms)\r\n\t\tconst hour = Math.floor( totalSeconds / (60*60) )\r\n\t\tconst minitue = Math.floor( (totalSeconds - hour*60*60) / 60 )\r\n\t\treturn hour + \":\" + ( '00' + minitue ).slice( -2 ) // 分は2桁でゼロ埋め\r\n\t}\r\n\r\n\t// 秒を時間に変換する\r\n\tstatic secondsToHour(seconds: number){\r\n\t\treturn Time.roundOffTwoDecimalPlaces(seconds/ (60 * 60), 3)\r\n\t}\r\n\r\n\t// 秒を分に変換する\r\n\tstatic secondsToMinute(seconds: number){\r\n\t\treturn Time.roundOffTwoDecimalPlaces(seconds/ 60, 1)\r\n\t}\r\n\r\n\t// ミリ秒を秒に変換する\r\n\tstatic milisecondsToSeconds(ms: number){\r\n    \treturn Math.round (ms / 1000)\r\n\t}\r\n\r\n\t// 分をミリ秒に変換する\r\n\tstatic minuteToMiliSeconds(minutes: number){\r\n\t\treturn minutes * 1000 * 60\r\n\t}\r\n\r\n\t// 小数点第〇位を四捨五入する\r\n\tstatic roundOffTwoDecimalPlaces(seconds: number, decimalPlace: number){\r\n\t\treturn Math.round(seconds * (10 ** (decimalPlace-1) )) / (10 ** (decimalPlace-1))\r\n\t}\r\n}","/**\r\n * htmlのclass属性を表すオブジェクト\r\n */\r\nexport class ElementClass{\r\n    private className: string\r\n\r\n    constructor(id: string){\r\n        this.className = id\r\n    }\r\n\r\n    getSelector(){\r\n        return '.' + this.className\r\n    }\r\n\r\n    getString(){\r\n        return this.className\r\n    }\r\n}","/**\r\n * htmlのid属性を表すオブジェクト\r\n */\r\nexport class ElementId{\r\n    private id: string\r\n\r\n    constructor(id: string){\r\n        this.id = id\r\n    }\r\n\r\n    getSelector(){\r\n        return '#' + this.id\r\n    }\r\n\r\n    getString(){\r\n        return this.id\r\n    }\r\n}","import { IMilestone } from \"../iMilestone\"\r\nimport { GitLabProjectAccessTokens } from \"./gitLabProjcetAccessTokens\"\r\nimport { Time } from \"../common/time\"\r\nimport { isUndefined } from \"../../function/nullCheck\"\r\n\r\nexport class GitLabApi{\r\n    private privateToken :string\r\n    private projectId :number\r\n    private domain : string\r\n\r\n\tconstructor(gitLabProjectAccessTokens: GitLabProjectAccessTokens){\r\n        this.domain = gitLabProjectAccessTokens.getGitLabDomain()\r\n\t\tthis.privateToken = gitLabProjectAccessTokens.getPrivateToken()\r\n\t\tthis.projectId = gitLabProjectAccessTokens.getProjectId()\r\n\t}\r\n\r\n\tgetProjectId(){\r\n\t\treturn this.projectId\r\n\t}\r\n\r\n\t// ログインユーザー情報取得\r\n\tasync getLoginUser(callback: Function){\r\n\t\tlet url = this.createBaseUrl()\r\n\t\turl.pathname = url.pathname + '/user/'\r\n\t\tawait this.getAjax(url, callback)\r\n\t}\r\n\r\n\t/**\r\n\t * GET /projects/:id/milestones\r\n\t * @param {*} callback \r\n\t */\r\n\t// async getAjaxMilestone(callback: Function){\r\n\t// \tlet url = this.createBaseUrl()\r\n\t// \turl.pathname = url.pathname + '/projects/' + this.getProjectId() + '/milestones'\r\n\t// \tawait this.getAjax(url, callback)\r\n\t// }\r\n\r\n\t/**\r\n\t * GET /projects/:id/issues\r\n\t * @param {*} callback \r\n\t * @param {*} milestone \r\n\t */\r\n\tasync getAjaxIssue(callback: Function, perPage: number, page: number){\r\n\t\tlet url = this.createBaseUrl()\r\n\t\turl.pathname = url.pathname + '/projects/' + this.getProjectId() + '/issues'\r\n\t\turl.search = '?per_page=' + perPage + '&page=' + page\r\n\t\tawait this.getAjax(url, callback)\r\n\t}\r\n\r\n\t/**\r\n\t * \r\n\t * @param {*} url \r\n\t * @param {*} callback \r\n\t */\r\n\tasync getAjax(url: URL, callback: Function){\r\n\t\tconsole.log('GET AjaxStart: ' + url)\r\n\t\tawait fetch(url.toString(), {\r\n\t\t\tmethod: 'GET',\r\n\t\t\tmode: 'cors',\r\n\t\t\theaders: {\r\n\t\t\t  'Content-Type': 'application/json',\r\n\t\t\t  'PRIVATE-TOKEN': this.privateToken\r\n\t\t\t},\r\n\t\t  })\r\n\t\t  .then(response => {\r\n\t\t\tif (!response.ok) {\r\n\t\t\t\tthrow new Error('下記のリクエストに失敗しているので、メッセージをご確認ください');\r\n\t\t\t}\r\n\t\t\treturn response.json();\r\n\t\t\t})\r\n\t\t\t.then((rslt) => {\r\n\t\t\t\tcallback(rslt)\r\n\t\t\t})\r\n\t\t\t.catch(error => {\r\n\t\t\t\tconsole.error(error);\r\n\t\t\t});\r\n\t\tconsole.log('GET AjaxEnd: ' + url)\r\n\t}\r\n\r\n\t/**\r\n\t * POST /projects/:id/issues/:issue_iid/add_spent_time\r\n\t * @param {*} callback \r\n\t * @param {*} issueIid \r\n\t * @param {*} spentTime ミリ秒\r\n\t */\r\n\tpostAjaxSpentIssue(callback: Function, issueIid: number, spentTime: number){\r\n\t\tlet url = this.createBaseUrl()\r\n\t\turl.pathname = url.pathname + '/projects/' + this.getProjectId() + '/issues/' + issueIid + '/add_spent_time'\r\n\t\turl.search = '?duration=' + Time.milisecondsToSeconds(spentTime) +'s'\r\n\t\tthis.postAjax(url, callback)\r\n\t}\r\n\r\n\t/**\r\n\t * \r\n\t * @param {*} url \r\n\t * @param {*} callback \r\n\t */\r\n\tasync postAjax(url: URL, callback: Function){\r\n\t\tconsole.log('POST AjaxStart: ' + url)\r\n\t\tawait fetch(url.toString(), {\r\n\t\t\tmethod: 'POST',\r\n\t\t\tmode: 'cors',\r\n\t\t\theaders: {\r\n\t\t\t  'Content-Type': 'application/json',\r\n\t\t\t  'PRIVATE-TOKEN': this.privateToken\r\n\t\t\t},\r\n\t\t  })\r\n\t\t  .then(response => {\t\r\n\t\t\tif (!response.ok) {\r\n\t\t\t\tthrow new Error('下記のリクエストに失敗しているので、メッセージをご確認ください');\r\n\t\t\t}\r\n\t\t\treturn response.json();\r\n\t\t\t})\r\n\t\t\t.then((rslt) => {\r\n\t\t\t\tcallback(rslt)\r\n\t\t\t})\r\n\t\t\t.catch(error => {\r\n\t\t\t\tconsole.error(error);\r\n\t\t\t});\r\n\t\tconsole.log('POST AjaxEnd: ' + url)\r\n\t}\r\n\r\n\tcreateBaseUrl(){\r\n\t\treturn new URL('https://' + this.getDomain() + '/api/v4')\r\n\t}\r\n\r\n\tgetDomain(){\r\n\t\treturn this.domain\r\n\t}\r\n}","import { IIssue } from \"../iIssue\"\r\nimport { GitLabUser } from \"./gitLabUser\"\r\nimport { isDefined } from \"../../function/nullCheck\"\r\n\r\n// Issue単体のクラス\r\nexport class GitLabIssue implements IIssue{\r\n    id :number //FIXME: stringの方がいいか？あとidのがいい\r\n    assignee :GitLabUser | undefined\r\n    title :string\r\n    timeEstimate :number //FIXME: RelativeTimeのがいい\r\n    timeSpend :number //FIXME: RelativeTimeのがいい\r\n    // good :number\r\n    // bad :number\r\n    labels :Array<string>\r\n    state :string\r\n    url :string\r\n\r\n\tconstructor(issue :any){\r\n\t\tthis.id = issue.iid\r\n\t\tthis.assignee = issue.assignee? new GitLabUser(issue.assignee) : undefined\r\n\t\tthis.title = issue.title\r\n\t\tthis.timeEstimate = issue.time_stats.time_estimate\r\n\t\tthis.timeSpend = issue.time_stats.total_time_spent\r\n\t\t// this.good = issue.upvotes\r\n\t\t// this.bad = issue.downvotes\r\n\t\tthis.labels = issue.labels\r\n\t\tthis.state = issue.state\r\n\t\tthis.url = issue.url//web_url\r\n\t}\r\n\r\n\t// 単一のプロジェクトのスコープ内で一意の内部ID。spendなどGitLab上のissueを更新するときにはこっちが必要\r\n\tgetId(){\r\n\t\treturn this.id\r\n\t} \r\n\r\n\tgetAssignee(){\r\n\t\treturn this.assignee!\r\n\t}\r\n\r\n\tisAssign(){\r\n\t\treturn isDefined(this.assignee) ? true : false\r\n\t}\r\n\r\n\tgetTitle(){\r\n\t\treturn this.title\r\n\t}\r\n\r\n\tgetTimeEstimate(){\r\n\t\treturn this.timeEstimate ? this.timeEstimate : 0\r\n\t}\r\n\r\n\tgetTimeSpend(){\r\n\t\treturn this.timeSpend ? this.timeSpend : 0\r\n\t}\r\n\r\n\t// getGood(){\r\n\t// \treturn this.good\r\n\t// }\r\n\r\n\t// getBad(){\r\n\t// \treturn this.bad\r\n\t// }\r\n\r\n\tgetLabels(){\r\n\t\treturn this.labels\r\n\t}\r\n\r\n\tgetUrl(){\r\n\t\treturn this.url\r\n\t}\r\n\r\n\t/**\r\n\t * 付箋が閉じているとき: \"closed\"\r\n\t * 付箋が開いているとき: \"opened\"\r\n\t */\r\n\tisActive(){\r\n\t\treturn this.state == \"opened\" ? true : false \r\n\t}\r\n}","export class GitLabProjectAccessTokens {\r\n\tprivate privateToken: string\r\n\tprivate gitlabDomain: string\r\n\tprivate projectId: number\r\n\r\n\tconstructor(privateToken: string, gitlabDomain: string, projectId: number){\r\n\t\tthis.privateToken = privateToken\r\n\t\tthis.gitlabDomain = gitlabDomain\r\n\t\tthis.projectId = projectId\r\n\t}\r\n\r\n\tsetPrivateToken(privateToken: string){\r\n\t\tthis.privateToken = privateToken\r\n\t}\r\n\r\n\tsetGitLabDomain(gitlabDomain: string){\r\n\t\tthis.gitlabDomain = gitlabDomain\r\n\t}\r\n\r\n\tsetProjectId(projectId: number){\r\n\t\tthis.projectId = projectId\r\n\t}\r\n\r\n\tgetPrivateToken(){\r\n\t\treturn this.privateToken\r\n\t}\r\n\r\n\tgetGitLabDomain(){\r\n\t\treturn this.gitlabDomain\r\n\t}\r\n\r\n\tgetProjectId(){\r\n\t\treturn this.projectId\r\n\t}\r\n}","import { IUser } from \"../iUser\"\r\n\r\n// ユーザー1名を表すクラス\r\nexport class GitLabUser implements IUser{\r\n    id :number\r\n    userName :string\r\n    label :string\r\n    imgPath :string\r\n    profilePath :string\r\n\r\n\tconstructor(user: any){\r\n\t\tthis.id = user.id\r\n\t\tthis.userName = user.username\r\n\t\tthis.label = user.name\r\n        this.imgPath = user.avatar_url\r\n\t\tthis.profilePath = user.web_url\r\n\t}\r\n\r\n\tgetId(){\r\n\t\treturn this.id\r\n\t}\r\n\r\n\tgetUserName(){\r\n\t\treturn this.userName\r\n\t}\r\n\r\n\tgetLabel(){\r\n\t\treturn this.label\r\n\t}\r\n\r\n    getImgPath(){\r\n        return this.imgPath\r\n    }\r\n\r\n    getProfilePath(){\r\n        return this.profilePath\r\n    }\r\n}","import { ElementId } from \"../element/elementId\"\r\n\r\n/**\r\n * ボタン「Spend」のクラス\r\n */ \r\nexport class SpendButton{\r\n    private dom: HTMLElement\r\n\r\n\tconstructor(domId: ElementId){\r\n\t\tthis.dom = document.querySelector(domId.getSelector())! //FIXME: Nullチェック\r\n\t}\r\n\r\n\taddListenerClickAfter(action: Function){\r\n\t\tthis.dom.addEventListener('click', ()=>{\r\n\t\t\taction()\r\n\t\t})\r\n\t}\r\n}","import { Time } from \"../common/time\"\r\nimport { ElementClass } from \"../element/elementClass\"\r\n/**\r\n * 合計消費時間を表す要素のクラス\r\n */\r\nexport class TotalElapsedTime{\r\n    private dom: Element\r\n    private totalElapsedTime: number\r\n\r\n\tconstructor(className: ElementClass){\r\n\t\tthis.dom = document.querySelector(className.getSelector())! //FIXME: Nullチェック\r\n\t\tthis.totalElapsedTime = 0 //s\r\n\t}\r\n\r\n    /**\r\n     * 合計消費時間をDOM要素へ反映する\r\n     */\r\n    set(milisec: number){\r\n        this.totalElapsedTime = milisec\r\n        this.dom.innerHTML = String(Time.secondsToclock(this.totalElapsedTime))\r\n    }\r\n}","import { isDefined } from \"../function/nullCheck\";\nimport { GitLabUser } from \"./gitlab/gitLabUser\";\nimport { IIssue } from \"./iIssue\";\nimport { IUser } from \"./iUser\";\n\n/**\n * issueをローカルストレージで保存、復元するためのDto\n * jsのlocalstorageはオブジェクトのfunctionをシリアライズできないため用意した\n */\nexport class IssueDto implements IIssue{\n    id :number\n    assignee :GitLabUser | undefined\n    title :string\n    timeEstimate :number\n    timeSpend :number\n    labels :Array<string>\n    state :string\n    url :string\n    constructor(issue: IIssue){\n\t\tthis.id = issue.id\n\t\tthis.assignee = issue.assignee? new GitLabUserDto(issue.id, issue.assignee.userName, issue.assignee.label, issue.assignee.imgPath, issue.assignee.profilePath) : undefined\n\t\tthis.title = issue.title\n\t\tthis.timeEstimate = issue.timeEstimate\n\t\tthis.timeSpend = issue.timeSpend\n\t\tthis.labels = issue.labels\n\t\tthis.state = issue.state\n\t\tthis.url = issue.url\n    }\n    getId(): number {\n        return this.id\n    }\n\n\tgetAssignee(){\n\t\treturn this.assignee!\n\t}\n\n\tisAssign(){\n\t\treturn isDefined(this.assignee) ? true : false\n\t}\n\n\tgetTitle(){\n\t\treturn this.title\n\t}\n\n\tgetTimeEstimate(){\n\t\treturn this.timeEstimate ? this.timeEstimate : 0\n\t}\n\n\tgetTimeSpend(){\n\t\treturn this.timeSpend ? this.timeSpend : 0\n\t}\n\n\tgetLabels(){\n\t\treturn this.labels\n\t}\n\n\tgetUrl(){\n\t\treturn this.url\n\t}\n\n\t/**\n\t * 付箋が閉じているとき: \"closed\"\n\t * 付箋が開いているとき: \"opened\"\n\t */\n\tisActive(){\n\t\treturn this.state == \"opened\" ? true : false \n\t}\n}\n\nclass GitLabUserDto implements IUser{\n    id :number\n    userName :string\n    label :string\n    imgPath :string\n    profilePath :string\n\n\tconstructor(id :number, userName :string, label :string, imgPath :string, profilePath :string){\n\t\tthis.id = id\n\t\tthis.userName = userName\n\t\tthis.label = label\n        this.imgPath = imgPath\n\t\tthis.profilePath = profilePath\n\t}\n\n\tgetId(){\n\t\treturn this.id\n\t}\n\n\tgetUserName(){\n\t\treturn this.userName\n\t}\n\n\tgetLabel(){\n\t\treturn this.label\n\t}\n\n    getImgPath(){\n        return this.imgPath\n    }\n\n    getProfilePath(){\n        return this.profilePath\n    }\n}","import { IIssue } from \"./iIssue\"\r\nimport { IUser } from \"./iUser\"\r\nimport { IssueParam } from \"./issueParam\"\r\nimport { isDefined } from \"../function/nullCheck\"\r\n\r\n/**\r\n * 付箋リストのクラス\r\n */\r\nexport class IssueList{\r\n    private issueList :Array<IIssue>\r\n\r\n\tconstructor(){\r\n\t\tthis.issueList = []\r\n\t}\r\n\r\n\t/**\r\n\t * issueの配列をセット\r\n\t * @param {Array[Issue]} issues \r\n\t */\r\n\tset(issues:Array<IIssue>){\r\n\t\tthis.issueList = issues\r\n\t}\r\n\r\n\tadd(issue: IIssue){\r\n\t\tthis.issueList.push(issue)\r\n\t}\r\n\r\n\tgetById(id: number){\r\n\t\treturn this.issueList.find(issue=> issue.getId() == id)\r\n\t}\r\n\r\n\t/**\r\n\t * Issueの配列を返却する\r\n\t * @returns Array[Issue]\r\n\t */\r\n\tgetIssueList(){\r\n\t\treturn this.issueList\r\n\t}\r\n\r\n\t/**\r\n\t * issue.idを重複なしの配列形式で返却する\r\n\t */\r\n\tgetAllIds(){\r\n\t\tconst ids = this.issueList.map(issue => issue.id)\r\n\t\treturn Array.from(new Set(ids))\r\n\t}\r\n\r\n\t// リストに含まれるユーザーを配列形式で返却する\r\n\tgetUserList(){\r\n\t\tlet assigneeInIssueList :Array<IUser> = []\r\n\t\tthis.issueList.forEach((issue)=>{\r\n            if(issue.isAssign()){\r\n                assigneeInIssueList.push(issue.getAssignee()!)\r\n            }\r\n\t\t})\r\n\t\treturn assigneeInIssueList\r\n\t}\r\n\r\n\t/**\r\n\t * 任意条件でリストを絞り込むメソッド\r\n\t * @param {IssueParam} issueParam \r\n\t */\r\n\tfilter(issueParam :IssueParam){\r\n\t\tlet filteredIssueList = this.issueList\r\n\t\tif(isDefined(issueParam.getUserId())){\r\n\t\t\tfilteredIssueList = filteredIssueList.filter(issue => issue.isAssign() && (issue.getAssignee()!.getId() == issueParam.getUserId()))\r\n\t\t}\r\n\t\t// labelが複数指定されている場合はand検索\r\n\t\tif(issueParam.getLabels().length > 0){\r\n\t\t\tissueParam.getLabels().forEach(label =>{\r\n\t\t\t\tfilteredIssueList = filteredIssueList.filter(issue =>\r\n\t\t\t\t\tissue.getLabels().includes(label)\r\n\t\t\t\t)\r\n\t\t\t})\r\n\t\t}\r\n\t\tif(issueParam.isActive() != null){\r\n\t\t\tfilteredIssueList = filteredIssueList.filter(issue => issue.isActive() == issueParam.isActive())\r\n\t\t}\r\n\r\n\t\tlet newIssueList = new IssueList()\r\n\t\tnewIssueList.set(filteredIssueList)\r\n\t\treturn newIssueList\r\n\t}\r\n\r\n\t// 総Issue数を返却する\r\n\tgetCountAll(){\r\n\t\treturn this.issueList.length\r\n\t}\r\n\r\n\t// 総見積もり時間[秒]を返却する\r\n\tgetTotalEstimateTime(){\r\n\t\tlet totalEstimate = 0\r\n\t\tthis.issueList.forEach((issue)=> {\r\n\t\t\ttotalEstimate = totalEstimate + issue.getTimeEstimate()\r\n\t\t})\r\n\t\treturn totalEstimate\r\n\t}\r\n\r\n\t// 総消費時間[秒]を返却する\r\n\tgetTotalSpentTime(){\r\n\t\tlet totalSpend = 0\r\n\t\tthis.issueList.forEach((issue)=> {\r\n\t\t\ttotalSpend = totalSpend + issue.getTimeSpend()\r\n\t\t})\r\n\t\treturn totalSpend\r\n\t}\r\n\r\n\t// 総グッド数を返却する\r\n\t// getCountGood(){\r\n\t// \tlet countGood = 0\r\n\t// \tthis.issueList.forEach((issue)=> {\r\n\t// \t\tcountGood = countGood + issue.getGood()\r\n\t// \t})\r\n\t// \treturn countGood\r\n\t// }\r\n\r\n\t// // 総バッド数を返却する\r\n\t// getCountBad(){\r\n\t// \tlet countBad = 0\r\n\t// \tthis.issueList.forEach((issue)=> {\r\n\t// \t\tcountBad = countBad + issue.getBad()\r\n\t// \t})\r\n\t// \treturn countBad\r\n\t// }\r\n}","/**\r\n * Issue検索・抽出用のパラメータ\r\n */\r\nexport class IssueParam{\r\n    private userId?: number\r\n    private activeFlg? :boolean\r\n    private labels :Array<string>\r\n\r\n\tconstructor(){\r\n\t\tthis.userId = undefined\r\n\t\tthis.labels = []\r\n\t\tthis.activeFlg = undefined\r\n\t}\r\n\r\n\tsetUserId(id: number){\r\n\t\tthis.userId = id\r\n\t}\r\n\r\n\tgetUserId(){\r\n\t\treturn this.userId\r\n\t}\r\n\r\n\tsetLabel(label: string){\r\n\t\tthis.labels.push(label)\r\n\t}\r\n\r\n\tgetLabels(){\r\n\t\treturn this.labels\r\n\t}\r\n\r\n\tsetActive(flg: boolean){\r\n\t\tthis.activeFlg = flg ? true : false\r\n\t}\r\n\r\n\tisActive(){\r\n\t\treturn this.activeFlg\r\n\t}\r\n\r\n}","import { ILocalStorage } from \"./iLocalStorage\"\r\nimport { isDefined } from \"../function/nullCheck\"\r\n\r\n/**\r\n *  ブラウザ用モック\r\n */\r\nexport class LocalStorageWindow implements ILocalStorage{\r\n\r\n\tasync setObject(key :string, obj: Object, callback? :Function ){\r\n\t\tlocalStorage.setItem(key, JSON.stringify(obj))\r\n\t\tif(isDefined(callback)){\r\n\t\t\tcallback!()\r\n\t\t}\r\n\t\t\r\n\t}\r\n\r\n\tasync getObject(key :string){\r\n        const rslt = localStorage.getItem(key)\r\n        if(rslt != null){\r\n            return JSON.parse(rslt)\r\n        }\r\n\t\treturn undefined\r\n\t}\r\n\r\n\tasync deleteObject(key :string){\r\n\t\tlocalStorage.removeItem(key)\r\n\t}\r\n}","import { Template } from \"../domain/common/template\"\r\nimport { IIssue } from \"./iIssue\"\r\nimport { Time } from \"./common/time\"\r\nimport { isDefined } from \"../function/nullCheck\"\r\nimport { Bootstrap5 } from \"./boostrap5\"\r\nimport { ElementClass } from \"./element/elementClass\"\r\nimport { ElementId } from \"./element/elementId\"\r\n\r\n/**\r\n * リスト内の一つの付箋に相当するクラス\r\n * 付箋のDOM要素とIssueオブジェクトの整合性を保つ\r\n */\r\nexport class StickyNote{\r\n\tprivate dom :Element\r\n\tprivate id :number\r\n\tprivate issue :IIssue\r\n\tprivate available :boolean\r\n\tprivate startDate? :number\r\n\tprivate elapsedTime :number\r\n\r\n\tconstructor(issue: IIssue){\r\n\t\t// テンプレートからひな形となるDOMを生成\r\n\t\tthis.dom = Template.createWrappedDom(new ElementId('issue-list-item-template'),'div', new ElementClass('list-group-item'))\r\n\t\t// 付箋のidはissueのidを利用する\r\n\t\tthis.id = issue.getId()\r\n\t\tthis.issue = issue\r\n\t\tthis.available = false\r\n\t\t// 工数カウント用\r\n\t\tthis.startDate = undefined\r\n\t\tthis.elapsedTime = 0 //ms\r\n\t\tthis.set(issue)\r\n\t}\r\n\r\n\t// 初期化\r\n\tset(issue :IIssue){\r\n\t\tthis.id = issue.getId()\r\n\t\tthis.issue = issue\r\n\t\t// Issueクラスの情報をDOM要素へ反映\r\n\t\tconst titleDom = this.dom.querySelector(StickyNote.SELECTOR_TITLE())! //Nullチェック\r\n\t\ttitleDom.innerHTML = issue.getTitle()\r\n\t\tconst spendTimeDom = this.dom.querySelector(StickyNote.SELECTOR_SPEND_TIME())! //Nullチェック\r\n\t\tspendTimeDom.innerHTML = String(Time.secondsToHour(issue.getTimeSpend()))\r\n\r\n\t\tconst profileAvatarDom: HTMLImageElement = this.dom.querySelector(StickyNote.SELECTOR_PROJILE_AVATAR())! // Nullチェック\r\n\t\tif(isDefined(issue.getAssignee())){\r\n\t\t\tprofileAvatarDom.src = issue.getAssignee()!.getImgPath()\r\n\t\t}\r\n\t\t// 実績に応じてプログレスバーの見た目を更新する\r\n\t\tthis.setProgressBar()\r\n\t\t\r\n\t\t// ラベルに応じてバッチの見た目を変える\r\n\t\tconst badgeDom = this.dom.querySelector(StickyNote.SELECTOR_BADGE())! // Nullチェック\r\n\t\tif(!issue.isActive()){\r\n\t\t\tbadgeDom.innerHTML = 'closed'\r\n\t\t\tbadgeDom.classList.add(Bootstrap5.CLASS_BG_DARK())\r\n\t\t}\r\n\t\telse{\r\n\t\t\tbadgeDom.innerHTML = issue.getLabels()[0] //FIXME: 複数ラベルに対応したい\r\n\t\t\tif(issue.getLabels()[0] == 'Doing'){\r\n\t\t\t\tbadgeDom.classList.add(Bootstrap5.CLASS_BG_SUCCESS())\r\n\t\t\t}\r\n\t\t\telse if(issue.getLabels()[0] == 'Waiting'){\r\n\t\t\t\tbadgeDom.classList.add(Bootstrap5.CLASS_BG_SECOUNDARY())\r\n\t\t\t}\r\n\t\t\telse if(issue.getLabels()[0] === '個人ToDo'){\r\n\t\t\t\tbadgeDom.classList.add(Bootstrap5.CLASS_BG_WARNING())\r\n\t\t\t}\r\n\t\t\telse if(issue.getLabels()[0] == 'レビュー待ち'){\r\n\t\t\t\tbadgeDom.classList.add(Bootstrap5.CLASS_BG_DANGER())\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// 選択状態にする\r\n\tselect(startDate: number){\r\n\t\tif(!this.available){\r\n\t\t\tthis.available = true\r\n\t\t\tthis.dom.classList.add(StickyNote.CLASS_AVAILABLE())\r\n\t\t\t// カウントアップを始める\r\n\t\t\tthis.startDate = startDate\r\n\t\t}\r\n\t}\r\n\r\n\t// 非選択状態にする\r\n\tunselect(){\r\n\t\t// 経過時間を反映\r\n\t\tif(isDefined(this.startDate)){\r\n\t\t\tif(this.available){\r\n\t\t\t\tthis.available = false\r\n\t\t\t\tthis.dom.classList.remove(StickyNote.CLASS_AVAILABLE())\r\n\t\t\t\tthis.setElapsedTime(Date.now() - this.startDate!)\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tnew Error(\"StartDateが未定義です\")\r\n\t\t}\r\n\t}\r\n\r\n\t// クリック時のイベントハンドラ登録\r\n\taddListenerClickAfter(action: Function){\r\n\t\tthis.dom.addEventListener('click', (index)=>{\r\n\t\t\taction(index)\r\n\t\t})\r\n\t}\r\n\t\r\n\t// 選択状態かを返却\r\n\tisAvailable(){\r\n\t\treturn this.available\r\n\t}\r\n\r\n\tgetDom(){\r\n\t\treturn this.dom\r\n\t}\r\n\r\n\tgetId(){\r\n\t\treturn this.id\r\n\t}\r\n\r\n\tsetId(id:number){\r\n\t\tthis.id = id\r\n\t}\r\n\r\n\tgetName(){\r\n\t\treturn this.issue.getTitle()\r\n\t}\r\n\r\n\tgetStartDate(){\r\n\t\treturn this.startDate\r\n\t}\r\n\r\n\tsetStartDate(date:number){\r\n\t\tthis.startDate = date\r\n\t}\r\n\r\n\tgetElapsedTime(){\r\n\t\treturn this.elapsedTime\r\n\t}\r\n\r\n\t// 経過時間をクラス内部の変数に保持し、見た目に反映する\r\n\tsetElapsedTime(time: number){\r\n\t\tthis.elapsedTime = this.elapsedTime + time\r\n\t\tconst elapsedTimeDom = this.dom.querySelector(StickyNote.SELECTOR_ELAPSED_TIME())! // Nullチェック\r\n\t\telapsedTimeDom.innerHTML = Time.humanFomatFromMiliseconds(this.elapsedTime)\r\n\t\tthis.setProgressBar()\r\n\t}\r\n\r\n\t// プログレスバー1,2の見た目を更新する\r\n\tsetProgressBar(){\r\n\t\tconst estimatedTime = this.issue.getTimeEstimate()\r\n\t\t, spendTime = this.issue.getTimeSpend()\r\n\t\t, addTime = Time.milisecondsToSeconds(this.elapsedTime)\r\n\r\n\t\tlet progressBarDom1 = this.dom.querySelector(StickyNote.SELECTOR_PROGRESS_BAR1())! // Nullチェック\r\n\t\t, progressBarDom2 = this.dom.querySelector(StickyNote.SELECTOR_PROGRESS_BAR2())! // Nullチェック\r\n\t\t\r\n\t\tlet progressPer1\r\n\t\t, progressPer2\r\n\t\tif(estimatedTime > 0){\r\n\t\t\tprogressPer1 = Math.floor((spendTime / estimatedTime) * 100)\r\n\t\t\tprogressPer2 = Math.floor((addTime / estimatedTime) * 100)\r\n\t\t} else if(spendTime + addTime > 0) {\r\n\t\t\tprogressPer1 = Math.floor(spendTime / (spendTime + addTime)) * 100\r\n\t\t\tprogressPer2 = Math.floor(addTime / (spendTime + addTime)) * 100\r\n\t\t} else {\r\n\t\t\tprogressPer1 = 0\r\n\t\t\tprogressPer2 = 0\r\n\t\t}\r\n\t\t// 1割以下だと追加時間が見えない。最低1割を確保する\r\n\t\tif(addTime > 0 && progressPer2 < 10){\r\n\t\t\tprogressPer2 = 10\r\n\t\t}\r\n\t\tif(spendTime > 0 && progressPer1 < 10){\r\n\t\t\tprogressPer1 = 10\r\n\t\t}\r\n\r\n\t\tprogressBarDom1.setAttribute(\"style\", \"width: \" + String(progressPer1) + '%' + \";\")\r\n\t\tprogressBarDom2.setAttribute(\"style\", \"width: \" + String(progressPer2) + '%' + \";\")\r\n\r\n\t\tprogressBarDom1.classList.remove(Bootstrap5.CLASS_BG_DANGER(), Bootstrap5.CLASS_BG_WARNING())\r\n\t\tprogressBarDom2.classList.remove(Bootstrap5.CLASS_BG_DANGER(), Bootstrap5.CLASS_BG_WARNING())\r\n\t\tif(progressPer1 + progressPer2 > 200){\r\n\t\t\tprogressBarDom1.classList.add(Bootstrap5.CLASS_BG_DANGER())\r\n\t\t\tprogressBarDom2.classList.add(Bootstrap5.CLASS_BG_DANGER())\r\n\t\t}\r\n\t\telse if(progressPer1 + progressPer2 > 100){\r\n\t\t\tprogressBarDom1.classList.add(Bootstrap5.CLASS_BG_WARNING())\r\n\t\t\tprogressBarDom2.classList.add(Bootstrap5.CLASS_BG_WARNING())\r\n\t\t}\r\n\t}\r\n\r\n\tstatic SELECTOR_TITLE(){\r\n\t\treturn \".stickyNote-title\"\r\n\t}\r\n\r\n\tstatic SELECTOR_SPEND_TIME(){\r\n\t\treturn \".stickyNote-spendTime\"\r\n\t}\r\n\r\n\tstatic SELECTOR_ELAPSED_TIME(){\r\n\t\treturn \".stickyNote-elapsedTime\"\r\n\t}\r\n\r\n\tstatic SELECTOR_EST_TIME(){\r\n\t\treturn \".stickyNote-estTime\"\r\n\t}\r\n\r\n\tstatic SELECTOR_PROJILE_AVATAR(){\r\n\t\treturn '.stickyNote-profile-avatar'\r\n\t}\r\n\r\n\tstatic SELECTOR_PROGRESS_BAR1(){\r\n\t\treturn '.stickyNote-progress-bar-1'\r\n\t}\r\n\r\n\tstatic SELECTOR_PROGRESS_BAR2(){\r\n\t\treturn '.stickyNote-progress-bar-2'\r\n\t}\r\n\r\n\tstatic SELECTOR_BADGE(){\r\n\t\treturn '.stickyNote-badge'\r\n\t}\r\n\r\n\t// 活性状態を表すクラス\r\n\tstatic CLASS_AVAILABLE(){\r\n\t\t// Bootstrapのコンテクストクラスを利用している\r\n\t\t// https://getbootstrap.jp/docs/5.0/components/list-group/#contextual-classes\r\n\t\treturn \"list-group-item-primary\"\r\n\t}\r\n\r\n}","import { ElementId } from \"./element/elementId\"\r\nimport { IssueList } from \"./issueList\"\r\nimport { StickyNote } from \"./stickyNote\"\r\nimport { WorkingTime } from \"./workingTime\"\r\nimport { IIssue } from \"./iIssue\"\r\nimport { isDefined } from \"../function/nullCheck\"\r\n\r\n// 表示されているリストのオブジェクト\r\nexport class StickyNoteList{\r\n    private dom: HTMLElement\r\n    private selectedId?: number\r\n    private selectedIndex?: number\r\n    private stickyNotes: Array<StickyNote>\r\n    private eventAfterClick: Function\r\n    private issueList?: IssueList\r\n\r\n    constructor(domId: ElementId){\r\n      this.dom = document.getElementById(domId.getString())!\r\n      this.selectedId = undefined //選択中の付箋ID\r\n      this.selectedIndex = undefined //選択中の付箋index\r\n      this.stickyNotes = []\r\n\r\n      this.eventAfterClick = () => {}\r\n    }\r\n  \r\n    /**\r\n     * 付箋リストからDOM要素を追加\r\n     * @param {IssueList} issueList \r\n     */\r\n    set(issueList: IssueList){\r\n      this.selectedId = undefined\r\n      this.selectedIndex = undefined\r\n      this.issueList = issueList\r\n      this.stickyNotes = [] // FIXME: 現状setするとStickyNoteを再生成しているため内部的にも保持されない。どっかで保持して再利用したい\r\n      this.dom.innerHTML = '' // FIXME: innerHTMLで子要素を削除するのは非推奨。whileで回すかjquery.remove()を使う\r\n      issueList.getIssueList().forEach((issue)=>{\r\n        this.add(issue)\r\n      })\r\n    }\r\n  \r\n    /**\r\n     * WorkingTimeListの実績をStickyNoteの実績に反映する\r\n     * @param {*} workingTimes \r\n     */\r\n    update(workingTimes: Array<WorkingTime>){\r\n      // 合計したWorkingTimeでStickyNoteに反映\r\n      workingTimes.forEach((workingTime)=>{\r\n          const targetIndex = this.getIndexById(workingTime.getTaskId())\r\n          if(targetIndex != -1){\r\n              this.stickyNotes[targetIndex].setStartDate(workingTime.getStartDate())\r\n              this.stickyNotes[targetIndex].setElapsedTime(workingTime.getElapsedTime())\r\n          }\r\n      })\r\n    }\r\n  \r\n    /**\r\n     * リストに新しく付箋を追加\r\n     * @param {Issue} issue \r\n     * @returns index\r\n     */\r\n    add(issue: IIssue, isPrepend = false){\r\n      const index = this.stickyNotes.length\r\n      // 各付箋の要素を生成\r\n      let stickyNote = new StickyNote(issue)\r\n      // クリック時のイベントハンドラを設定\r\n      stickyNote.addListenerClickAfter(()=>{\r\n        this.selectByIndex(index)\r\n        this.eventAfterClick(stickyNote)\r\n      })\r\n      this.stickyNotes.push(stickyNote)\r\n      if(isPrepend){\r\n          this.dom.prepend(stickyNote.getDom())\r\n      } else {\r\n          this.dom.append(stickyNote.getDom())\r\n      }\r\n      return index\r\n    }\r\n  \r\n    /**\r\n     * 任意のindexの付箋を選択状態にする\r\n     * @param {Number} index\r\n     * @param {Number} startDate? <opt> 開始時刻。デフォルトは現在時刻\r\n     */\r\n    selectByIndex(index: number, startDate?: number){\r\n      if(index != this.selectedIndex){\r\n        this.unselectAll()\r\n        this.selectedIndex = index\r\n        this.selectedId = this.stickyNotes[index].getId()\r\n        // 開始時間が指定されていれば、その時刻から選択した状態に\r\n        startDate = isDefined(startDate)? startDate! : Date.now()\r\n        this.stickyNotes[index].select(startDate)\r\n      }\r\n      else{\r\n        this.unselectAll()\r\n      }\r\n    }\r\n  \r\n    getAll(){\r\n        return this.stickyNotes\r\n    }\r\n  \r\n    /**\r\n     * 任意のidからindexを検索する\r\n     * @param {*} id \r\n     * @returns idに対応するIssueのindex、なければ-1\r\n     */\r\n    getIndexById(id: number){\r\n      return this.stickyNotes.findIndex(stickyNote => stickyNote.getId() == id)\r\n    }\r\n  \r\n    /**\r\n     * 任意のidが存在するか\r\n     */\r\n    existById(id: number){\r\n        return this.getIndexById(id) != -1\r\n    }\r\n  \r\n    /**\r\n     * 任意のidからStickeyNoteを検索する\r\n     * @param {Number} id\r\n     * @returns idに対応するStickyNote\r\n     */\r\n    getById(id: number){\r\n      return this.stickyNotes[this.getIndexById(id)]\r\n    }\r\n  \r\n    /**\r\n     * 選択中の付箋idを返却する\r\n     * @returns {Number} id\r\n     */\r\n    getSelectedId(){\r\n        return this.selectedId\r\n    }\r\n  \r\n    /**\r\n     * 全ての付箋を非選択状態にする\r\n     */\r\n    unselectAll(){\r\n      this.selectedId = undefined\r\n      this.selectedIndex = undefined\r\n      this.stickyNotes.forEach((stickyNote) => {\r\n        stickyNote.unselect()\r\n      })\r\n    }\r\n  \r\n    /**\r\n     * 工数など全て初期化する\r\n     */\r\n    clearAll(){\r\n    if(isDefined(this.issueList)){\r\n        this.set(this.issueList!)\r\n    }\r\n     \r\n    }\r\n  \r\n    /**\r\n     * クリック時のイベントハンドラを設定する\r\n     */\r\n    addListenerClickAfter(action: Function){\r\n      this.eventAfterClick = action\r\n    }\r\n  }","/**\r\n * 作業実績を示すドメインクラス\r\n * 実績の最小単位で、作業中のタスクを切り替える・完了すると、このクラスが1つ出来るはず\r\n */\r\nexport class WorkingTime{\r\n\tprivate workingTimeId: string\r\n    private startDate: number\r\n    private elapsedTime: number\r\n    private taskId: number\r\n    private taskName: string\r\n\r\n\tconstructor(startDate: number, elapsedTime: number, taskId: number, taskName: string){\r\n\t\tthis.workingTimeId = taskId + \"_\" + startDate\r\n\t\tthis.startDate = startDate\r\n\t\tthis.elapsedTime = elapsedTime //s\r\n\t\tthis.taskId = taskId\r\n\t\tthis.taskName = taskName\r\n\t}\r\n\r\n\tgetWorkingTimeId(){\r\n\t\treturn this.workingTimeId\r\n\t}\r\n\r\n\tgetStartDate(){\r\n\t\treturn this.startDate\r\n\t}\r\n\r\n\tsetStartDate(date: number){\r\n\t\tthis.startDate = date\r\n\t}\r\n\r\n\tsetElapsedTime(seconds: number){\r\n\t\tthis.elapsedTime = seconds\r\n\t}\r\n\r\n\tgetElapsedTime(){\r\n\t\treturn this.elapsedTime\r\n\t}\r\n\t\r\n\tgetTime(){\r\n\t\treturn this.elapsedTime\r\n\t}\r\n\r\n\tgetTaskId(){\r\n\t\treturn this.taskId\r\n\t}\r\n\r\n\tsetTaskName(taskName: string){\r\n\t\tthis.taskName = taskName\r\n\t}\r\n\r\n\tgetTaskName(){\r\n\t\treturn this.taskName\r\n\t}\r\n}","import { WorkingTime } from \"./workingTime\"\r\n\r\n/**\r\n * 作業実績のサービスクラス\r\n * 作業時間の合計単位は一日になるはず\r\n */\r\nexport class WorkingTimeList{\r\n    private workingTimes: Array<WorkingTime>\r\n    private elapsedTime: number\r\n\r\n\tconstructor(){\r\n\t\tthis.workingTimes = []\r\n\t\tthis.elapsedTime = 0 //s\r\n\t}\r\n\r\n\tadd(workingTime: WorkingTime){\r\n\t\tthis.workingTimes.push(workingTime)\r\n\t\tthis.elapsedTime = this.elapsedTime + workingTime.getTime()\r\n\t}\r\n\r\n\tremove(workingTimeId: string){\r\n\t\tconst targetIndex = this.workingTimes.findIndex(workingTime => workingTime.getWorkingTimeId() == workingTimeId)\r\n\t\treturn this.workingTimes.splice( targetIndex, 1 );\r\n\t}\r\n\r\n\tclear(){\r\n\t\tthis.workingTimes = []\r\n\t\tthis.elapsedTime = 0 //s\r\n\t}\r\n\r\n\tgetAll(){\r\n\t\treturn this.workingTimes\r\n\t}\r\n\r\n\tgetListGroupById(){\r\n\t\tlet workingTimesByTask: Array<WorkingTime> = []\r\n\t\tthis.workingTimes.forEach((workingTime)=>{\r\n\t\t\tconst sameTaskIndex = workingTimesByTask.findIndex((workingTimeByTask)=>{\r\n\t\t\t\tworkingTimeByTask.getTaskId() == workingTime.getTaskId()\r\n\t\t\t})\r\n\t\t\t// 既に実績があるタスクは\r\n\t\t\tif(sameTaskIndex != -1){\r\n\t\t\t\t// 時間を追加する\r\n\t\t\t\tconst totalTime = workingTimesByTask[sameTaskIndex].getElapsedTime() + workingTime.getElapsedTime()\r\n\t\t\t\tworkingTimesByTask[sameTaskIndex].setElapsedTime(totalTime)\r\n\t\t\t\t// より最新のStartDateであればそちらを採用する\r\n\t\t\t\tif(workingTimesByTask[sameTaskIndex].getStartDate() > workingTime.getStartDate()){\r\n\t\t\t\t\tworkingTimesByTask[sameTaskIndex].setStartDate(workingTime.getStartDate())\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// 実績がない場合は保存\r\n\t\t\telse {\r\n\t\t\t\tworkingTimesByTask.push(workingTime)\r\n\t\t\t}\r\n\t\t})\r\n\t\treturn workingTimesByTask\r\n\t}\r\n\r\n\tgetElapsedTime(){\r\n\t\treturn this.elapsedTime\r\n\t}\r\n}","import { Template } from \"./common/template\"\r\nimport { WorkingTime } from \"./workingTime\"\r\nimport { ElementClass } from \"./element/elementClass\"\r\nimport { ElementId } from \"./element/elementId\"\r\nimport { Time } from \"./common/time\"\r\n\r\n/**\r\n * 工数リスト内の一つの付箋に相当するクラス\r\n * 付箋のDOM要素とWorkingTimeオブジェクトの整合性を保つ\r\n */\r\nexport class WorkingTimeSticky{\r\n\tprivate dom :Element\r\n\tprivate id :string\r\n\tprivate index :number\r\n\tprivate workingTime?: WorkingTime\r\n\tprivate selected :Boolean = false\r\n    private eventAfterChange: Function = ()=>{}\r\n\r\n    constructor(workingTime: WorkingTime, index :number){\r\n\t\t// テンプレートからひな形となるDOMを生成\r\n\t\tthis.dom = Template.createWrappedDom(new ElementId('workingTime-list-item-template'),'div', new ElementClass('list-item'))\r\n\t\t// 付箋のidはworkingTimeのidを利用する\r\n\t\tthis.workingTime = workingTime\r\n\t\tthis.id = workingTime.getWorkingTimeId()\r\n\t\tthis.index = index\r\n\t\tthis.set(workingTime)\r\n\t}\r\n\r\n\t/**\r\n\t * 付箋が選択状態か\r\n\t * @returns \r\n\t */\r\n\tisSelected(){\r\n\t\treturn this.selected\r\n\t}\r\n\r\n\t/**\r\n\t * 選択状態を切り替える\r\n\t * @returns 切替後の選択状態\r\n\t */\r\n\tswitchSelect(){\r\n\t\tconst elemTitle = this.dom.querySelector(WorkingTimeSticky.SELECTOR_TITLE())\r\n\t\tconst elemEditArea = this.dom.querySelector(WorkingTimeSticky.SELECTOR_BODY())\r\n\t\tif(this.selected){\r\n\t\t\telemTitle!.classList.add('text-truncate');\r\n\t\t\telemEditArea!.classList.add(WorkingTimeSticky.CLASSNAME_HIDE());\r\n\t\t} else {\r\n\t\t\telemTitle!.classList.remove('text-truncate');\r\n\t\t\telemEditArea!.classList.remove(WorkingTimeSticky.CLASSNAME_HIDE());\r\n\t\t}\r\n\t\tthis.selected = !this.selected\r\n\t\treturn this.selected\r\n\t}\r\n\r\n    /**\r\n     * 初期化\r\n     * @param workingTime \r\n     */\r\n    set(workingTime :WorkingTime){\r\n\t\tthis.workingTime = workingTime\r\n\t\tthis.id = workingTime.getWorkingTimeId()\r\n\t\t// WorkingTimeクラスの情報をDOM要素へ反映\r\n\t\t\r\n\t\t// 初期表示設定\r\n\t\tconst titleDom = this.dom.querySelector(WorkingTimeSticky.SELECTOR_TITLE())! //Nullチェック\r\n\t\ttitleDom.innerHTML = workingTime.getTaskName()\r\n\t\tconst spendTimeDom = this.dom.querySelector(WorkingTimeSticky.SELECTOR_SPEND_TIME())! //Nullチェック\r\n\t\tspendTimeDom.innerHTML = String(Time.secondsToclock(workingTime.getElapsedTime()))\r\n\t\tconst elapsedTimeDom: HTMLInputElement = this.dom.querySelector(WorkingTimeSticky.SELECTOR_ELAPSEDTIME())! //Nullチェック\r\n\t\t\t, elapsedTimeValue = workingTime.getElapsedTime()\r\n\t\telapsedTimeDom.setAttribute('value', String(Time.secondsToMinute(Time.milisecondsToSeconds(elapsedTimeValue))))\r\n\t\t\r\n\t\t// elapsedTimeが変更された時のイベント登録\r\n\t\telapsedTimeDom.addEventListener('change', () => {\r\n\t\t\tspendTimeDom.innerHTML = String(Time.secondsToclock(Time.minuteToMiliSeconds(Number(elapsedTimeDom.value))))\r\n\t\t\tthis.workingTime!.setElapsedTime(Time.minuteToMiliSeconds(Number(elapsedTimeDom.value)))\r\n\t\t\tthis.eventAfterChange()\r\n\t\t}) \r\n\r\n\t\t// addボタンがクリックされたときのイベント登録\r\n\t\tconst addDoms: NodeListOf<HTMLElement> = this.dom.querySelectorAll(WorkingTimeSticky.SELECTOR_ADD())! //Nullチェック\r\n\t\taddDoms.forEach((addDom)=>{\r\n\t\t\taddDom.addEventListener('click', () => {\r\n\t\t\t\tconst dataMinutes = addDom.dataset.minitue\r\n\t\t\t\tconst elappsedTime = Number(elapsedTimeDom.value) + Number(dataMinutes)\r\n\t\t\t\telapsedTimeDom.value = String(elappsedTime)\r\n\t\t\t\tthis.workingTime!.setElapsedTime(Time.minuteToMiliSeconds(elappsedTime))\r\n\t\t\t\tspendTimeDom.innerHTML = String(Time.secondsToclock(Time.minuteToMiliSeconds(elappsedTime)))\r\n\t\t\t\tthis.eventAfterChange()\r\n\t\t\t})\r\n\t\t})\r\n\t\t// subボタンがクリックされたときのイベント登録\r\n\t\tconst subDoms: NodeListOf<HTMLElement> =  this.dom.querySelectorAll(WorkingTimeSticky.SELECTOR_SUB())! //Nullチェック\r\n\t\tsubDoms.forEach((subDom)=>{\r\n\t\t\tsubDom.addEventListener('click', () => {\r\n\t\t\t\tconst dataMinutes = subDom.dataset.minitue\r\n\t\t\t\tconst elappsedTime = Number(elapsedTimeDom.value) - Number(dataMinutes) < 0 ? 0 : Number(elapsedTimeDom.value) - Number(dataMinutes) \r\n\t\t\t\telapsedTimeDom.value = String(elappsedTime)\r\n\t\t\t\tthis.workingTime!.setElapsedTime(Time.minuteToMiliSeconds(elappsedTime))\r\n\t\t\t\tspendTimeDom.innerHTML = String(Time.secondsToclock(Time.minuteToMiliSeconds(elappsedTime)))\r\n\t\t\t\tthis.eventAfterChange()\r\n\t\t\t})\r\n\r\n\t\t})\r\n\r\n\t\tconst headerDom = this.dom.querySelector(WorkingTimeSticky.SELECTOR_HEADER())! //Nullチェック\r\n\t\theaderDom.addEventListener('click', () => {\r\n\t\t\tthis.switchSelect()\r\n\t\t})\r\n    }\r\n\r\n\t/**\r\n\t * DOM要素を初期化する\r\n\t */\r\n\tclear(){\r\n\t\tthis.dom.remove()\r\n\t\tthis.workingTime = undefined\r\n\t\tthis.id = ''\r\n\t\tthis.index = 0\r\n\t}\r\n\r\n\t/**\r\n\t * 値が変更されたときの振る舞いをセット\r\n\t */\r\n\taddEventListenerAfterChange(func :Function){\r\n\t\tthis.eventAfterChange = func\r\n\t}\r\n\r\n\t/**\r\n\t * 閉じるボタンを押下したときの振る舞い\r\n\t * @param clickAfterFunc \r\n\t */\r\n    addListenerCloseButtonClickAfter(clickAfterFunc :Function){\r\n        const elemCloseButton = this.dom.querySelector(WorkingTimeSticky.SELECTOR_DELETE_BUTTON())\r\n\t\telemCloseButton!.addEventListener('click', () => {\r\n\t\t\tclickAfterFunc(this.index)\r\n\t\t\tthis.clear()\r\n\t\t})\r\n    }\r\n\r\n\tgetWorkingTime(){\r\n\t\treturn this.workingTime\r\n\t}\r\n\r\n    getDom(){\r\n        return this.dom\r\n    }\r\n\r\n\tgetId(){\r\n\t\treturn this.id\r\n\t}\r\n\tsetIndex(index: number){\r\n\t\tthis.index = index\r\n\t}\r\n\t\r\n\tgetIndex(){\r\n\t\treturn this.index\r\n\t}\r\n\r\n\tstatic SELECTOR_HEADER(){\r\n\t\treturn \".workingTime-header\"\r\n\t}\r\n\r\n\tstatic SELECTOR_TITLE(){\r\n\t\treturn \".workingTime-title\"\r\n\t}\r\n\r\n\tstatic SELECTOR_SPEND_TIME(){\r\n\t\treturn \".workingTime-spendTime\"\r\n\t}\r\n\r\n\tstatic SELECTOR_BODY(){\r\n\t\treturn \".workingTime-body\"\r\n\t}\r\n\r\n\tstatic SELECTOR_ADD(){\r\n\t\treturn \".workingTime-add\"\r\n\t}\r\n\r\n\tstatic SELECTOR_SUB(){\r\n\t\treturn \".workingTime-sub\"\r\n\t}\r\n\r\n\tstatic SELECTOR_ELAPSEDTIME(){\r\n\t\treturn \".workingTime-elapsedTime\"\r\n\t}\r\n\r\n\tstatic SELECTOR_DELETE_BUTTON(){\r\n\t\treturn \".workingTime-deleteButton\"\r\n\t}\r\n\r\n\tstatic CLASSNAME_HIDE(){\r\n\t\treturn \"hide\"\r\n\t}\r\n\r\n\tstatic CLASSNAME_READONLY(){\r\n\t\treturn \"readonly\"\r\n\t}\r\n}","import { WorkingTimeSticky } from \"./workingTimeSticky\"\r\nimport { WorkingTimeList } from \"./workingTimeList\"\r\nimport { ElementId } from \"./element/elementId\"\r\nimport { WorkingTime } from \"./workingTime\"\r\nimport { IStickyList } from \"./iStickyList\"\r\nimport { isDefined, isUndefined } from \"../function/nullCheck\"\r\n\r\nexport class WorkingTimeStickyList implements IStickyList{\r\n    private dom: HTMLElement\r\n    private workingTimeStickies: Array<WorkingTimeSticky>\r\n    private eventAfterChange: Function = ()=>{}\r\n\r\n    constructor(domId: ElementId){\r\n      this.dom = document.getElementById(domId.getString())!\r\n      this.workingTimeStickies = []\r\n    }\r\n    \r\n    /**\r\n     * 作業実績リストからDOM要素を追加\r\n     * @param {WorkingTimeList} WorkingTimeList \r\n     */\r\n    set(workingTimeList: WorkingTimeList){\r\n        this.workingTimeStickies = []\r\n        this.dom.innerHTML = '' // FIXME: innerHTMLで子要素を削除するのは非推奨。whileで回すかjquery.remove()を使う\r\n        workingTimeList.getAll().forEach((workingTime)=>{\r\n          this.add(workingTime)\r\n        })\r\n    }\r\n    /**\r\n     * \r\n     * @param workingTime \r\n     */\r\n    add(workingTime: WorkingTime, isPrepend = false){\r\n      const index: number = this.workingTimeStickies.length\r\n      // 各付箋の要素を生成\r\n      let workingTimeSticky = new WorkingTimeSticky(workingTime, index)\r\n      this.workingTimeStickies.push(workingTimeSticky)\r\n      if(isPrepend){\r\n          this.dom.prepend(workingTimeSticky.getDom())\r\n      } else {\r\n          this.dom.append(workingTimeSticky.getDom())\r\n      }\r\n\r\n      // クローズボタンクリック時のイベントハンドラを設定\r\n      const selfId = workingTimeSticky.getId()\r\n      workingTimeSticky.addListenerCloseButtonClickAfter(()=>{\r\n        this.delete(selfId)\r\n        this.eventAfterChange()\r\n      })\r\n      workingTimeSticky.addEventListenerAfterChange(()=>{\r\n        this.eventAfterChange()\r\n      })\r\n      return index\r\n    }\r\n\r\n    /**\r\n     * Deleteボタンクリック時のイベントハンドラを設定する\r\n     * @param action(WorkingTimeList)  除外済みのWorkingTimeListを引数としたFunction\r\n     */\r\n    addListenerChangeAfter(action: Function){\r\n      this.eventAfterChange = action\r\n    }\r\n\r\n    /**\r\n     * WorkingTimeSticky（実績の付箋）IDからindexを取得する\r\n     * @param id \r\n     * @returns IDに合致するindex。それ以外の場合は -1 を返します。\r\n     */\r\n    getIndex(id: string){\r\n      return this.workingTimeStickies.findIndex((workingTimeSticky)=>id == workingTimeSticky.getId())\r\n    }\r\n\r\n    /**\r\n     * 実績の付箋を削除する\r\n     * @param index インデックス番号\r\n     * @returns \r\n     */\r\n    delete(id: string){\r\n      const index = this.getIndex(id)\r\n      if(index == -1){\r\n        throw(\"WorkingTimeStickyDelete:Invalid Index Error\")\r\n      } else {\r\n        // 該当する付箋を取り除く\r\n        const deleteWorkingTimeStickiy = this.workingTimeStickies.splice(index,1)[0]\r\n        if(isUndefined(deleteWorkingTimeStickiy)){\r\n          throw(\"WorkingTimeStickyDelete:Invalid Index Error\")\r\n        } else {\r\n          this.updateAllIndex()\r\n        }\r\n      }\r\n    }\r\n    \r\n    /**\r\n     * 全てのWorkingTimeStickyのインデックスを採番し直す。イベントリスナーなどで使うインデックスの整合性を取る\r\n     */\r\n    updateAllIndex(){\r\n      this.workingTimeStickies.forEach((workingTimeSticky, index) => {\r\n        workingTimeSticky.setIndex(index)\r\n      })\r\n    }\r\n\r\n    /**\r\n     * WorkingTimeListを取得する。\r\n     */\r\n    getWorkingTimeList(){\r\n      let workingTimeList = new WorkingTimeList() \r\n        this.workingTimeStickies.forEach((workingTimeStickiey) => {\r\n          if(isDefined(workingTimeStickiey.getWorkingTime())){\r\n            workingTimeList.add(workingTimeStickiey.getWorkingTime()!)\r\n          }\r\n        })\r\n      return workingTimeList;\r\n    }\r\n}","/**\r\n * 空を表すときはundefinedを一律使用してください。\r\n * Nullは使用禁止。\r\n */\r\n\r\n/**\r\n * 変数が定義済みかどうか\r\n * @param obj \r\n * @returns \r\n */\r\nexport function isDefined(obj :any) :boolean{\r\n    if(obj == null){\r\n        new Error('Invalid Type Error: expected Undefined but Null. 空を表すときはundefinedを一律使用してください。')\r\n    }\r\n    return obj !== void 0\r\n}\r\n/**\r\n * 変数が未定義かどうか\r\n * @param obj \r\n * @returns \r\n */\r\nexport function isUndefined(obj :any) :boolean{\r\n    return !isDefined(obj)\r\n}\r\n\r\n/**\r\n * Nullチェック\r\n * 空を表すときはundefinedを一律使用してください。\r\n * @param obj \r\n * @returns \r\n */\r\nexport function isNotNull(obj :any) :boolean{\r\n    return obj != null\r\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { TotalElapsedTime } from \"../domain/html/totalElapsedTime\"\nimport { SpendButton } from \"../domain/html/spendButton\"\nimport { ElementId } from \"../domain/element/elementId\"\nimport { ElementClass } from \"../domain/element/elementClass\"\nimport { GitLabProjectAccessTokens } from \"../domain/gitlab/gitLabProjcetAccessTokens\"\nimport { GitLabApi } from \"../domain/gitlab/gitLabApi\"\nimport { GitLabUser } from \"../domain/gitlab/gitLabUser\"\nimport { GitLabIssue } from \"../domain/gitlab/gitLabIssue\"\nimport { IUser } from \"../domain/iUser\"\nimport { IIssue } from \"../domain/iIssue\"\nimport { IssueList } from \"../domain/issueList\"\nimport { IssueParam } from \"../domain/issueParam\"\nimport { ILocalStorage } from \"../domain/iLocalStorage\"\n// import { LocalStorageChrome } from \"../domain/localStorageChrome\"\nimport { LocalStorageWindow } from \"../domain/localStorageWindow\"\nimport { WorkingTime } from \"../domain/workingTime\"\nimport { WorkingTimeList } from \"../domain/workingTimeList\"\nimport { StickyNote } from \"../domain/stickyNote\"\nimport { StickyNoteList } from \"../domain/stickyNoteList\"\nimport { isDefined, isUndefined } from \"../function/nullCheck\"\nimport { WorkingTimeStickyList } from \"../domain/workingTimeStickyList\"\nimport { IssueDto } from \"../domain/issueDto\"\n\n\n// プライベートトークン\nlet PRIVATE_TOKEN: string\nlet GITLAB_DOMAIN: string\nlet PROJECT_ID: number\n\n// ローカル保存用のKey\nconst KEY_SELECT_ISSUE_ID = 'select_issue_id'\n\t, KEY_START_DATE = 'start_date'\n\t, KEY_WORKINGTIMES = 'workingtimes'\n\t, KEY_ISSUE_LIST = 'issue_list'\n\t, KEY_PRIVATE_TOKEN = 'private_token'\n\t, KEY_GITLAB_DOMAIN = 'gitlab_domain'\n\t, KEY_GITLAB_PROJECT_ID = 'gitlab_project_id'\n\t, KEY_IS_OUTPUT_JSON_WHEN_SPENT = 'is_output_json_when_spent'\n\n/**------------------------------------- NICE TO HAVE ----------------------------------- //\n * \n * Vue.jsにしたいよね\n * 閉じて開いたら選択している付箋はelapsedとtoday更新されていてほしい\n * 付箋並び替えたい（人順とか）\n * プロフ写真ローカルに保存したい。取得できなくなってたら取り直すとかもしたい\n * ディレクトリ構造を考えて配置したい\n * ローカルストレージの付箋情報は最新化しておきたい\n * getIssueAjaxをprefetchしたい（=callbackではなくPromiseで制御すれば実現できる）\n * json実績のバックアップを取りたい\n * \n */ \n\n// --------------------------------------- 状態一覧 --------------------------------------- //\nlet loginUser: IUser\nlet selectIssueId: number | undefined\nlet startDate: number | undefined\n// 仕事をした実績たち\nlet workingTimeList: WorkingTimeList\n// 内部的に持ってるイシューリスト\nlet issueList: IssueList\n// spent時にJSON出力するか\nlet isOutputJsonWhenSpent = true\n\n// ------------------------------------ 画面項目一覧 ------------------------------------ //\n// Spendボタン\nlet spendButton: SpendButton\n// 合計消費時間を示すdiv要素\nlet totalElapsedTime: TotalElapsedTime\n// 付箋一覧\nlet stickyNoteList: StickyNoteList\n// 実績一覧\nlet workingTimeStickyList : WorkingTimeStickyList\n\n// ------------------------------- 外部接続用クライアント ----------------------------------//\nlet localStorageClient: ILocalStorage\nlet gitLabApiClient: GitLabApi\n\n// ------------------------------------- 処理内容 ---------------------------------------- //\nlocalStorageClient = new LocalStorageWindow() //LocalStorageChrome()\nconst logined = loginCheck()\ndocument.addEventListener(\"DOMContentLoaded\", async function(){\n\tif(await logined){\n\t\tlet fetch = preFetchAjax()\n\t\tawait initialize()\n\t\tawait fetch\n\t\t// gitlabに新しい付箋をfetchして追加\n\t\tgitLabApiClient.getAjaxIssue((rslt: any) => {\n\t\t\tlet tempIssues: Array<IIssue> = []\n\t\t\trslt.forEach((issue: IIssue)=>{\n\t\t\t\ttempIssues.push(new GitLabIssue(issue))\n\t\t\t})\n\t\t\tlet tempIssueList = new IssueList()\n\t\t\ttempIssueList.set(tempIssues)\n\t\t\tconst filterParam = new IssueParam()\n\t\t\tif(isDefined(loginUser) && isDefined(loginUser.getId())){\n\t\t\t\tfilterParam.setUserId(loginUser.getId())\n\t\t\t}\n\t\t\tfilterParam.setActive(true)\n\t\t\tfilterParam.setLabel('Doing')\n\t\t\tconst issueIds = issueList.getAllIds()\n\t\t\ttempIssueList.filter(filterParam).getIssueList().forEach(issue => {\n\t\t\t\t// ローカルストレージにある付箋の場合\n\t\t\t\tif(isDefined(issueIds.find(id => id == issue.id))){\n\t\t\t\t\t// FIXME: 付箋情報の更新\n\t\t\t\t} else {\n\t\t\t\t// ローカルストレージにない、新しい付箋の場合\n\t\t\t\t\tissueList.add(issue)\n\t\t\t\t\tstickyNoteList.add(issue, true)\n\t\t\t\t}\n\t\t\t});\n\t\t\tlocalStorageClient.setObject(KEY_ISSUE_LIST, issueList.getIssueList())\n\t\t}, 100, 1)\n\t}\n\telse {\n\t\twindow.location.href = './setting.html'\n\t}\n});\n\n// ------------------------------------- 以下ファンクション ---------------------------------------- //\n\n/**\n * ログインチェックを行う\n */\nasync function loginCheck(){\n\tconst privateToken = await localStorageClient.getObject(KEY_PRIVATE_TOKEN)\n\tconst gitLabDomain = await localStorageClient.getObject(KEY_GITLAB_DOMAIN)\n\tconst gitLabProjectId = await localStorageClient.getObject(KEY_GITLAB_PROJECT_ID)\n\tconst isLogin = isDefined(privateToken) && isDefined(gitLabDomain) && isDefined(gitLabProjectId)\n\t// 設定フラグ\n\tisOutputJsonWhenSpent = await localStorageClient.getObject(KEY_IS_OUTPUT_JSON_WHEN_SPENT) == true\n\tif(isLogin){\n\t\tPRIVATE_TOKEN = privateToken\n\t\tGITLAB_DOMAIN = gitLabDomain\n\t\tPROJECT_ID = gitLabProjectId\n\t\tgitLabApiClient = new GitLabApi(new GitLabProjectAccessTokens(PRIVATE_TOKEN, GITLAB_DOMAIN, PROJECT_ID))\n\t\treturn true\n\t} else {\n\t\treturn false\n\t}\n}\n\n/**\n * Ajaxでデータを取得する処理\n * 待機時間取得軽減の為、Ajaxは先に飛ばす\n */\nasync function preFetchAjax(){\n\t// ログインユーザーを取得\n\tawait gitLabApiClient.getLoginUser((rslt: any)=>{\n\t\t// 画面アイコンに適用\n\t\tloginUser = new GitLabUser(rslt)\n\t\tconst avatarElement = document.querySelector('.profile-avatar')! // Nullチェック\n\t\tavatarElement.setAttribute('src', loginUser.getImgPath())\n\t})\n}\n\n/**\n * 初期表示\n */\nasync function initialize(){\n\t// 画面操作用にオブジェクト生成\n\tspendButton = new SpendButton(new ElementId('spend-button'))\n\ttotalElapsedTime = new TotalElapsedTime(new ElementClass('total-elapsedTime'))\n\tstickyNoteList = new StickyNoteList(new ElementId('issue-list'))\n\tworkingTimeList = new WorkingTimeList()\n\tworkingTimeStickyList = new WorkingTimeStickyList(new ElementId('workingTime-sticky-list'))\n\tissueList = new IssueList()\n\n\t// もし以前付箋を開いたことがある場合、ローカルキャッシュから一覧を生成する\n\tlet savedIssueList: Array<IIssue> | undefined = await localStorageClient.getObject(KEY_ISSUE_LIST)\n\tif(isDefined(savedIssueList) && savedIssueList!.length > 0){\n\t\t// 付箋として追加\n\t\tlet gitLabIssue: Array<GitLabIssue> = []\n\t\tsavedIssueList!.forEach(iissue => {\n\t\t\tgitLabIssue.push(new IssueDto(iissue))\n\t\t})\n\t\tissueList.set(gitLabIssue)\n\t\tstickyNoteList.set(issueList)\n\t}\n\tsetEventListener()\n\trevertToBeforeState()\n}\n\n/**\n * 以前の操作履歴を復元\n */\nasync function revertToBeforeState(){\n\tselectIssueId = await localStorageClient.getObject(KEY_SELECT_ISSUE_ID)\n\n\tstartDate = await localStorageClient.getObject(KEY_START_DATE)\n\n\tlet workingTimes: Array<WorkingTime> | undefined = await localStorageClient.getObject(KEY_WORKINGTIMES)\n\tif(isDefined(workingTimes) && workingTimes!.length > 0){\n\t\tworkingTimes!.forEach((workingTimeObj: any)=>{\n\t\t\t// 内部的な実績に反映\n\t\t\tconst workingTime = new WorkingTime(workingTimeObj.startDate, workingTimeObj.elapsedTime, workingTimeObj.taskId, workingTimeObj.taskName)\n\t\t\tworkingTimeList.add(workingTime)\n\t\t})\n\t\t// 見た目に反映\n\t\tstickyNoteList.update(workingTimeList.getListGroupById())\n\t\ttotalElapsedTime.set(workingTimeList.getElapsedTime())\n\t\tworkingTimeStickyList.set(workingTimeList)\n\t}\n\n\t// 付箋リストの見た目を、内部的に保持している状態に更新する\n\tconst selectIssueIndex = stickyNoteList.getIndexById(selectIssueId!)\n\t// 選択してるイシューがリストにあれば\n\tif(selectIssueIndex != -1){\n\t\t// 選択する\n\t\tif(startDate){\n\t\t\tstickyNoteList.selectByIndex(selectIssueIndex, startDate)\n\t\t}\n\t}\n\n}\n\n/**\n * イベントリスナーの設定\n */\nfunction setEventListener(){\n\t// Spendボタン押下時のイベントハンドラを設定\n\tspendButton.addListenerClickAfter(()=>{\n\t\t// スペントする？\n\t\tconst spentOk = confirm('実績がクリアされます。\\r\\nGitLabに実績を送信してよろしいですか？\\r\\n Are you want to spend on GitLab?')\n\t\tif(spentOk){\n\t\t\tworkingTimeList.getAll().forEach((workingTime)=>{\n\t\t\t\tgitLabApiClient.postAjaxSpentIssue(()=>{}, workingTime.getTaskId(), workingTime.getTime())\n\t\t\t})\n\t\t\tstickyNoteList.clearAll()\n\t\t\tworkingTimeList.clear()\n\t\t\ttotalElapsedTime.set(0)\n\t\t\tlocalStorageClient.setObject(KEY_WORKINGTIMES, {})\n\t\t\tlocalStorageClient.setObject(KEY_ISSUE_LIST, {})\n\t\t}\n\t})\n\n\t// 付箋選択時のイベントハンドラを設定\n\tstickyNoteList.addListenerClickAfter((stickyNote: StickyNote) => {\n\t\tconst endDate = Date.now()\n\t\t// 選択された付箋が選択状態であれば\n\t\tif(stickyNote.isAvailable()){\n\t\t\t// 前に選択されていたタスクの実績を記録する\n\t\t\tif(isDefined(selectIssueId)){\n\t\t\t\tconst beforeStickyNote = stickyNoteList.getById(selectIssueId!)\n\t\t\t\tconst workingTime = new WorkingTime(beforeStickyNote.getStartDate()!, endDate - beforeStickyNote.getStartDate()!, beforeStickyNote.getId(), beforeStickyNote.getName())\n\t\t\t\tworkingTimeList.add(workingTime)\n\t\t\t}\n\t\t\t// 選択された付箋IDを状態変数に保持\n\t\t\tselectIssueId = stickyNote.getId()\n\t\t\tstartDate = Date.now()\n\t\t\t// 初期表示用にローカルストレージにも保存\n\t\t\tlocalStorageClient.setObject(KEY_SELECT_ISSUE_ID, selectIssueId)\n\t\t\tlocalStorageClient.setObject(KEY_START_DATE, startDate)\n\t\t}\n\t\telse {\n\t\t\t// 選択を外されたタスクの実績を記録する\n\t\t\tconst workingTime = new WorkingTime(stickyNote.getStartDate()!, endDate - stickyNote.getStartDate()!, stickyNote.getId(), stickyNote.getName())\n\t\t\tworkingTimeList.add(workingTime)\n\n\t\t\t// 状態変数を初期化\n\t\t\tselectIssueId = undefined\n\t\t\tstartDate = undefined\n\t\t\t// ローカルストレージも初期化\n\t\t\tlocalStorageClient.deleteObject(KEY_SELECT_ISSUE_ID)\n\t\t\tlocalStorageClient.deleteObject(KEY_START_DATE)\n\t\t}\n\t\tworkingTimeStickyList.set(workingTimeList)\n\t\ttotalElapsedTime.set(workingTimeList.getElapsedTime())\n\t\tconst saveWorkingTimes = workingTimeList.getAll()\n\t\tlocalStorageClient.setObject(KEY_WORKINGTIMES, saveWorkingTimes)\n\t})\n\t\n\t// 付箋リスト変更時のイベントハンドラを設定\n\tworkingTimeStickyList.addListenerChangeAfter(()=>{\n\t\tworkingTimeList = workingTimeStickyList.getWorkingTimeList()\n\t\ttotalElapsedTime.set(workingTimeList.getElapsedTime())\n\t\tlocalStorageClient.setObject(KEY_WORKINGTIMES, workingTimeList.getAll())\n\t})\n\n\t// Export JSON\n\tdocument.querySelector('.export-json')!.addEventListener('click', ()=>{\n\t\tconst jsonText = JSON.stringify(workingTimeList.getAll())\n\t\tnavigator.clipboard.writeText(jsonText).then(()=>alert('クリップボードにコピーしました。')).catch(e=>alert('コピー時にエラー！ '+e.message));\n\t})\n}"],"names":[],"sourceRoot":""}